---
source: crates/codegen/src/tests.rs
assertion_line: 335
expression: "(test[1], res, res_opt)"
---
- "\nfn foo() {\n    let x: float = 1.0\n    if x < 2.0 {\n        let y: int = 4 & 3 ^ 1\n        y\n    } else {\n        let y: int = -2\n        y\n    }\n}\nfn main() { foo() }\n"
- "; ModuleID = 'main'\nsource_filename = \"main\"\n\ndefine void @\"_main~foo~void\"() {\nentry:\n  %y3 = alloca i32, align 4\n  %y = alloca i32, align 4\n  %x = alloca float, align 4\n  store float 1.000000e+00, float* %x, align 4\n  %x1 = load float, float* %x, align 4\n  %ult.float = fcmp ult float %x1, 2.000000e+00\n  %if.cond.int = icmp ne i1 %ult.float, false\n  br i1 %if.cond.int, label %if.then, label %if.else\n\nif.then:                                          ; preds = %entry\n  store i32 1, i32* %y, align 4\n  %y2 = load i32, i32* %y, align 4\n  br label %if.end\n\nif.end:                                           ; preds = %if.else, %if.then\n  %if.else.phi.int32 = phi i32 [ %y2, %if.then ], [ %y4, %if.else ]\n  ret void\n\nif.else:                                          ; preds = %entry\n  store i32 -2, i32* %y3, align 4\n  %y4 = load i32, i32* %y3, align 4\n  br label %if.end\n}\n\ndefine void @main() {\nentry:\n  call void @\"_main~foo~void\"()\n  ret void\n}\n"
- "; ModuleID = 'main'\nsource_filename = \"main\"\n\ndefine void @\"_main~foo~void\"() {\nentry:\n  ret void\n}\n\ndefine void @main() {\nentry:\n  call void @\"_main~foo~void\"()\n  ret void\n}\n"

