---
source: crates/codegen/src/tests.rs
assertion_line: 331
expression: "(test[1], res, res_opt)"
---
- "\nfn foo() {\n    let x: float = 1.0\n    for x: int = 1; x < 10; 1 {\n        x\n    }\n    x\n}\nfn main() { foo() }\n"
- "; ModuleID = 'main'\nsource_filename = \"main\"\n\ndefine void @\"_main::foo~void\"() {\nentry:\n  %x1 = alloca i32, align 4\n  %x = alloca float, align 4\n  store float 1.000000e+00, float* %x, align 4\n  store i32 1, i32* %x1, align 4\n  br label %for.cond\n\nfor.cond:                                         ; preds = %for.step, %entry\n  %x2 = load i32, i32* %x1, align 4\n  %slt.int = icmp slt i32 %x2, 10\n  br i1 %slt.int, label %for.body, label %for.post\n\nfor.body:                                         ; preds = %for.cond\n  %x3 = load i32, i32* %x1, align 4\n  br label %for.step\n\nfor.step:                                         ; preds = %for.body\n  %x4 = load i32, i32* %x1, align 4\n  %for.int.step = add i32 %x4, 1\n  store i32 %for.int.step, i32* %x1, align 4\n  br label %for.cond\n\nfor.post:                                         ; preds = %for.cond\n  %x5 = load float, float* %x, align 4\n  ret void\n}\n\ndefine void @main() {\nentry:\n  call void @\"_main::foo~void\"()\n  ret void\n}\n"
- "; ModuleID = 'main'\nsource_filename = \"main\"\n\ndefine void @\"_main::foo~void\"() {\nentry:\n  br label %for.cond\n\nfor.cond:                                         ; preds = %for.body, %entry\n  %x4 = phi i32 [ 1, %entry ], [ %for.int.step, %for.body ]\n  %slt.int = icmp slt i32 %x4, 10\n  br i1 %slt.int, label %for.body, label %for.post\n\nfor.body:                                         ; preds = %for.cond\n  %for.int.step = add i32 %x4, 1\n  br label %for.cond\n\nfor.post:                                         ; preds = %for.cond\n  ret void\n}\n\ndefine void @main() {\nentry:\n  call void @\"_main::foo~void\"()\n  ret void\n}\n"

