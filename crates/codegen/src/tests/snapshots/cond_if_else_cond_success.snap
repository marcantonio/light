---
source: crates/codegen/src/tests.rs
assertion_line: 224
expression: "(test[1], res, res_opt)"
---
- "\nfn plus_one(x: int) -> int { x + 1 }\nfn main() {\n    if plus_one(6) == 7 {\n        7\n    } else {\n        1\n    }\n}\n"
- "; ModuleID = 'main'\nsource_filename = \"main\"\n\ndefine i32 @\"_main~plus_one~int32~int32\"(i32 %x) {\nentry:\n  %x1 = alloca i32, align 4\n  store i32 %x, i32* %x1, align 4\n  %x2 = load i32, i32* %x1, align 4\n  %add.int = add i32 %x2, 1\n  ret i32 %add.int\n}\n\ndefine void @main() {\nentry:\n  %\"call__main~plus_one~int32~int32\" = call i32 @\"_main~plus_one~int32~int32\"(i32 6)\n  %eq.int = icmp eq i32 %\"call__main~plus_one~int32~int32\", 7\n  %if.cond.int = icmp ne i1 %eq.int, false\n  br i1 %if.cond.int, label %if.then, label %if.else\n\nif.then:                                          ; preds = %entry\n  br label %if.end\n\nif.end:                                           ; preds = %if.else, %if.then\n  %if.else.phi.int32 = phi i32 [ 7, %if.then ], [ 1, %if.else ]\n  ret void\n\nif.else:                                          ; preds = %entry\n  br label %if.end\n}\n"
- "; ModuleID = 'main'\nsource_filename = \"main\"\n\ndefine i32 @\"_main~plus_one~int32~int32\"(i32 %x) {\nentry:\n  %add.int = add i32 %x, 1\n  ret i32 %add.int\n}\n\ndefine void @main() {\nentry:\n  %\"call__main~plus_one~int32~int32\" = call i32 @\"_main~plus_one~int32~int32\"(i32 6)\n  ret void\n}\n"

