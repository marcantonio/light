[@0,0:5='module',<'module'>,1:0]
[@1,7:10='main',<IDENT>,1:7]
[@2,11:11=';',<';'>,1:11]
[@3,14:16='use',<'use'>,3:0]
[@4,18:21='core',<IDENT>,3:4]
[@5,22:22=';',<';'>,3:8]
[@6,24:26='use',<'use'>,4:0]
[@7,28:35='foo::bar',<IDENT>,4:4]
[@8,36:36=';',<';'>,4:12]
[@9,39:44='extern',<'extern'>,6:0]
[@10,46:47='fn',<'fn'>,6:7]
[@11,49:55='putchar',<IDENT>,6:10]
[@12,56:56='(',<'('>,6:17]
[@13,57:57='x',<IDENT>,6:18]
[@14,58:58=':',<':'>,6:19]
[@15,60:62='int',<TYPE>,6:21]
[@16,63:63=')',<')'>,6:24]
[@17,64:64=';',<';'>,6:25]
[@18,67:68='fn',<'fn'>,8:0]
[@19,70:72='foo',<IDENT>,8:3]
[@20,73:73='(',<'('>,8:6]
[@21,74:74=')',<')'>,8:7]
[@22,76:77='->',<'->'>,8:9]
[@23,79:81='int',<TYPE>,8:12]
[@24,83:83='{',<'{'>,8:16]
[@25,89:89='3',<NUMBER>,9:4]
[@26,91:91='+',<'+'>,9:6]
[@27,93:93='3',<NUMBER>,9:8]
[@28,94:94=';',<';'>,9:9]
[@29,96:96='}',<'}'>,10:0]
[@30,97:97=';',<';'>,10:1]
[@31,113:114='fn',<'fn'>,13:0]
[@32,116:118='bar',<IDENT>,13:3]
[@33,119:119='(',<'('>,13:6]
[@34,120:120='x',<IDENT>,13:7]
[@35,121:121=':',<':'>,13:8]
[@36,123:125='int',<TYPE>,13:10]
[@37,126:126=')',<')'>,13:13]
[@38,128:128='{',<'{'>,13:15]
[@39,129:129='}',<'}'>,13:16]
[@40,130:130=';',<';'>,13:17]
[@41,133:134='fn',<'fn'>,15:0]
[@42,136:138='baz',<IDENT>,15:3]
[@43,139:139='(',<'('>,15:6]
[@44,140:140='x',<IDENT>,15:7]
[@45,141:141=':',<':'>,15:8]
[@46,143:145='int',<TYPE>,15:10]
[@47,146:146=',',<','>,15:13]
[@48,148:148='y',<IDENT>,15:15]
[@49,149:149=':',<':'>,15:16]
[@50,151:153='int',<TYPE>,15:18]
[@51,154:154=')',<')'>,15:21]
[@52,156:156='{',<'{'>,15:23]
[@53,157:157='}',<'}'>,15:24]
[@54,158:158=';',<';'>,15:25]
[@55,161:162='fn',<'fn'>,17:0]
[@56,164:167='main',<IDENT>,17:3]
[@57,168:168='(',<'('>,17:7]
[@58,169:169=')',<')'>,17:8]
[@59,171:171='{',<'{'>,17:10]
[@60,177:179='let',<'let'>,18:4]
[@61,181:181='x',<IDENT>,18:8]
[@62,182:182=':',<':'>,18:9]
[@63,184:186='int',<TYPE>,18:11]
[@64,188:188='=',<'='>,18:15]
[@65,190:190='2',<NUMBER>,18:17]
[@66,192:192='+',<'+'>,18:19]
[@67,194:194='5',<NUMBER>,18:21]
[@68,196:196='*',<'*'>,18:23]
[@69,198:198='4',<NUMBER>,18:25]
[@70,199:199=';',<';'>,18:26]
[@71,205:207='for',<'for'>,19:4]
[@72,209:209='i',<IDENT>,19:8]
[@73,210:210=':',<':'>,19:9]
[@74,212:214='int',<TYPE>,19:11]
[@75,216:216='=',<'='>,19:15]
[@76,218:218='1',<NUMBER>,19:17]
[@77,219:219=';',<';'>,19:18]
[@78,221:221='i',<IDENT>,19:20]
[@79,223:223='<',<'<'>,19:22]
[@80,225:225='x',<IDENT>,19:24]
[@81,226:226=';',<';'>,19:25]
[@82,228:228='1',<NUMBER>,19:27]
[@83,230:230='{',<'{'>,19:29]
[@84,240:240='x',<IDENT>,20:8]
[@85,242:242='=',<'='>,20:10]
[@86,244:244='(',<'('>,20:12]
[@87,245:245='3',<NUMBER>,20:13]
[@88,247:247='-',<'-'>,20:15]
[@89,249:249='4',<NUMBER>,20:17]
[@90,250:250=')',<')'>,20:18]
[@91,252:252='/',<'/'>,20:20]
[@92,254:254='2',<NUMBER>,20:22]
[@93,255:255=';',<';'>,20:23]
[@94,265:266='if',<'if'>,21:8]
[@95,268:268='x',<IDENT>,21:11]
[@96,270:270='>',<'>'>,21:13]
[@97,272:273='10',<NUMBER>,21:15]
[@98,275:275='{',<'{'>,21:18]
[@99,289:289='x',<IDENT>,22:12]
[@100,291:291='=',<'='>,22:14]
[@101,293:293='8',<NUMBER>,22:16]
[@102,294:294=';',<';'>,22:17]
[@103,304:304='}',<'}'>,23:8]
[@104,305:305=';',<';'>,23:9]
[@105,311:311='}',<'}'>,24:4]
[@106,312:312=';',<';'>,24:5]
[@107,319:320='if',<'if'>,26:4]
[@108,322:322='x',<IDENT>,26:7]
[@109,324:325='>=',<'>='>,26:9]
[@110,327:327='3',<NUMBER>,26:12]
[@111,329:329='{',<'{'>,26:14]
[@112,339:341='let',<'let'>,27:8]
[@113,343:343='y',<IDENT>,27:12]
[@114,344:344=':',<':'>,27:13]
[@115,346:348='int',<TYPE>,27:15]
[@116,350:350='=',<'='>,27:19]
[@117,352:352='2',<NUMBER>,27:21]
[@118,353:353=';',<';'>,27:22]
[@119,363:363='-',<'-'>,28:8]
[@120,364:364='y',<IDENT>,28:9]
[@121,365:365=';',<';'>,28:10]
[@122,371:371='}',<'}'>,29:4]
[@123,373:376='else',<'else'>,29:6]
[@124,378:378='{',<'{'>,29:11]
[@125,388:388='x',<IDENT>,30:8]
[@126,390:390='+',<'+'>,30:10]
[@127,392:392='1',<NUMBER>,30:12]
[@128,394:394='*',<'*'>,30:14]
[@129,396:396='4',<NUMBER>,30:16]
[@130,397:397=';',<';'>,30:17]
[@131,403:403='}',<'}'>,31:4]
[@132,404:404=';',<';'>,31:5]
[@133,411:412='if',<'if'>,33:4]
[@134,414:414='x',<IDENT>,33:7]
[@135,416:417='==',<'=='>,33:9]
[@136,419:420='10',<NUMBER>,33:12]
[@137,422:422='{',<'{'>,33:15]
[@138,432:432='-',<'-'>,34:8]
[@139,433:433='x',<IDENT>,34:9]
[@140,434:434=';',<';'>,34:10]
[@141,440:440='}',<'}'>,35:4]
[@142,442:445='else',<'else'>,35:6]
[@143,447:448='if',<'if'>,35:11]
[@144,450:450='x',<IDENT>,35:14]
[@145,452:452='>',<'>'>,35:16]
[@146,454:455='10',<NUMBER>,35:18]
[@147,457:457='{',<'{'>,35:21]
[@148,467:469='foo',<IDENT>,36:8]
[@149,470:470=';',<';'>,36:11]
[@150,476:476='}',<'}'>,37:4]
[@151,478:481='else',<'else'>,37:6]
[@152,483:484='if',<'if'>,37:11]
[@153,486:486='x',<IDENT>,37:14]
[@154,488:488='<',<'<'>,37:16]
[@155,490:491='10',<NUMBER>,37:18]
[@156,493:493='{',<'{'>,37:21]
[@157,503:506='foob',<IDENT>,38:8]
[@158,507:507=';',<';'>,38:12]
[@159,513:513='}',<'}'>,39:4]
[@160,515:518='else',<'else'>,39:6]
[@161,520:520='{',<'{'>,39:11]
[@162,530:530='-',<'-'>,40:8]
[@163,531:531='!',<'!'>,40:9]
[@164,532:532='-',<'-'>,40:10]
[@165,533:533='x',<IDENT>,40:11]
[@166,534:534=';',<';'>,40:12]
[@167,540:540='}',<'}'>,41:4]
[@168,541:541=';',<';'>,41:5]
[@169,548:550='let',<'let'>,43:4]
[@170,552:552='a',<IDENT>,43:8]
[@171,553:553=':',<':'>,43:9]
[@172,555:555='[',<'['>,43:11]
[@173,556:558='int',<TYPE>,43:12]
[@174,559:559=']',<']'>,43:15]
[@175,561:561='=',<'='>,43:17]
[@176,563:563='[',<'['>,43:19]
[@177,564:564=']',<']'>,43:20]
[@178,565:565=';',<';'>,43:21]
[@179,571:571='a',<IDENT>,44:4]
[@180,573:573='=',<'='>,44:6]
[@181,575:575='[',<'['>,44:8]
[@182,576:576='1',<NUMBER>,44:9]
[@183,577:577=',',<','>,44:10]
[@184,579:579='2',<NUMBER>,44:12]
[@185,580:580=',',<','>,44:13]
[@186,582:582='3',<NUMBER>,44:15]
[@187,583:583=']',<']'>,44:16]
[@188,584:584=';',<';'>,44:17]
[@189,590:590='x',<IDENT>,45:4]
[@190,592:592='=',<'='>,45:6]
[@191,594:594='a',<IDENT>,45:8]
[@192,595:595='[',<'['>,45:9]
[@193,596:596='0',<NUMBER>,45:10]
[@194,597:597=']',<']'>,45:11]
[@195,598:598=';',<';'>,45:12]
[@196,604:604='x',<IDENT>,46:4]
[@197,606:606='=',<'='>,46:6]
[@198,608:608='a',<IDENT>,46:8]
[@199,609:609='[',<'['>,46:9]
[@200,610:610='1',<NUMBER>,46:10]
[@201,612:612='+',<'+'>,46:12]
[@202,614:614='1',<NUMBER>,46:14]
[@203,615:615=']',<']'>,46:15]
[@204,616:616=';',<';'>,46:16]
[@205,623:625='foo',<IDENT>,48:4]
[@206,626:626='(',<'('>,48:7]
[@207,627:627=')',<')'>,48:8]
[@208,628:628=';',<';'>,48:9]
[@209,634:636='bar',<IDENT>,49:4]
[@210,637:637='(',<'('>,49:7]
[@211,638:638='x',<IDENT>,49:8]
[@212,639:639=')',<')'>,49:9]
[@213,640:640=';',<';'>,49:10]
[@214,646:648='baz',<IDENT>,50:4]
[@215,649:649='(',<'('>,50:7]
[@216,650:650='x',<IDENT>,50:8]
[@217,651:651=',',<','>,50:9]
[@218,653:653='y',<IDENT>,50:11]
[@219,654:654=')',<')'>,50:12]
[@220,655:655=';',<';'>,50:13]
[@221,661:663='let',<'let'>,51:4]
[@222,665:665='y',<IDENT>,51:8]
[@223,666:666=':',<':'>,51:9]
[@224,668:670='int',<TYPE>,51:11]
[@225,671:671=';',<';'>,51:14]
[@226,677:679='let',<'let'>,52:4]
[@227,681:681='c',<IDENT>,52:8]
[@228,682:682=':',<':'>,52:9]
[@229,684:687='char',<TYPE>,52:11]
[@230,689:689='=',<'='>,52:16]
[@231,691:693=''c'',<CHAR>,52:18]
[@232,694:694=';',<';'>,52:21]
[@233,700:700='c',<IDENT>,53:4]
[@234,702:702='=',<'='>,53:6]
[@235,704:707=''\n'',<CHAR>,53:8]
[@236,708:708=';',<';'>,53:12]
[@237,715:715='i',<IDENT>,55:4]
[@238,717:718='+=',<'+='>,55:6]
[@239,720:720='1',<NUMBER>,55:9]
[@240,721:721=';',<';'>,55:10]
[@241,728:728='x',<IDENT>,57:4]
[@242,729:729='.',<'.'>,57:5]
[@243,730:735='method',<IDENT>,57:6]
[@244,736:736='(',<'('>,57:12]
[@245,737:737=')',<')'>,57:13]
[@246,738:738=';',<';'>,57:14]
[@247,744:744='x',<IDENT>,58:4]
[@248,745:745='.',<'.'>,58:5]
[@249,746:750='field',<IDENT>,58:6]
[@250,752:753='+=',<'+='>,58:12]
[@251,755:755='1',<NUMBER>,58:15]
[@252,756:756=';',<';'>,58:16]
[@253,758:758='}',<'}'>,59:0]
[@254,759:759=';',<';'>,59:1]
[@255,762:767='struct',<'struct'>,61:0]
[@256,769:771='Foo',<IDENT>,61:7]
[@257,773:773='{',<'{'>,61:11]
[@258,779:781='let',<'let'>,62:4]
[@259,783:785='bar',<IDENT>,62:8]
[@260,786:786=':',<':'>,62:11]
[@261,788:790='int',<TYPE>,62:13]
[@262,791:791=';',<';'>,62:16]
[@263,797:799='let',<'let'>,63:4]
[@264,801:803='baz',<IDENT>,63:8]
[@265,804:804=':',<':'>,63:11]
[@266,806:810='float',<TYPE>,63:13]
[@267,812:812='=',<'='>,63:19]
[@268,814:816='1.0',<NUMBER>,63:21]
[@269,817:817=';',<';'>,63:24]
[@270,824:825='fn',<'fn'>,65:4]
[@271,827:832='method',<IDENT>,65:7]
[@272,833:833='(',<'('>,65:13]
[@273,834:834=')',<')'>,65:14]
[@274,836:836='{',<'{'>,65:16]
[@275,846:849='self',<'self'>,66:8]
[@276,850:850='.',<'.'>,66:12]
[@277,851:853='bar',<IDENT>,66:13]
[@278,855:855='=',<'='>,66:17]
[@279,857:860='self',<'self'>,66:19]
[@280,861:861='.',<'.'>,66:23]
[@281,862:864='bar',<IDENT>,66:24]
[@282,866:866='+',<'+'>,66:28]
[@283,868:868='1',<NUMBER>,66:30]
[@284,869:869=';',<';'>,66:31]
[@285,875:875='}',<'}'>,67:4]
[@286,876:876=';',<';'>,67:5]
[@287,878:878='}',<'}'>,68:0]
[@288,879:879=';',<';'>,68:1]
[@289,881:880='<EOF>',<EOF>,69:0]
(program (mod_decl module main ;) (stmt_list (stmt (use_stmt use core)) ; (stmt (use_stmt use foo::bar)) ; (stmt (extern_decl extern (proto fn putchar ( (typed_decl x : (type_antn int)) )))) ; (stmt (fn_decl (proto fn foo ( ) -> (type_antn int)) (block { (stmt_list (stmt (expr (expr (primary_expr (lit_expr 3))) + (expr (primary_expr (lit_expr 3))))) ;) }))) ; (stmt (fn_decl (proto fn bar ( (typed_decl x : (type_antn int)) )) (block { }))) ; (stmt (fn_decl (proto fn baz ( (typed_decl x : (type_antn int)) , (typed_decl y : (type_antn int)) )) (block { }))) ; (stmt (fn_decl (proto fn main ( )) (block { (stmt_list (stmt (let_stmt let (var_init (typed_decl x : (type_antn int)) = (expr (expr (primary_expr (lit_expr 2))) + (expr (expr (primary_expr (lit_expr 5))) * (expr (primary_expr (lit_expr 4)))))))) ; (stmt (for_stmt for (var_init (typed_decl i : (type_antn int)) = (expr (primary_expr (lit_expr 1)))) ; (expr (expr (primary_expr (ident_expr i))) < (expr (primary_expr (ident_expr x)))) ; 1 (block { (stmt_list (stmt (expr (assignable_expr (ident_expr x)) = (expr (expr (primary_expr (paren_expr ( (expr (expr (primary_expr (lit_expr 3))) - (expr (primary_expr (lit_expr 4)))) )))) / (expr (primary_expr (lit_expr 2)))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (assignable_expr (ident_expr x)) = (expr (primary_expr (lit_expr 8))))) ;) }))))) ;) }))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) >= (expr (primary_expr (lit_expr 3)))) (block { (stmt_list (stmt (let_stmt let (var_init (typed_decl y : (type_antn int)) = (expr (primary_expr (lit_expr 2)))))) ; (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr y))))))) ;) }) else (block { (stmt_list (stmt (expr (expr (primary_expr (ident_expr x))) + (expr (expr (primary_expr (lit_expr 1))) * (expr (primary_expr (lit_expr 4)))))) ;) }))))) ; (stmt (expr (primary_expr (cond_expr if (expr (expr (primary_expr (ident_expr x))) == (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) > (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foo)))) ;) }) else (cond_expr if (expr (expr (primary_expr (ident_expr x))) < (expr (primary_expr (lit_expr 10)))) (block { (stmt_list (stmt (expr (primary_expr (ident_expr foob)))) ;) }) else (block { (stmt_list (stmt (expr (primary_expr (unop_expr - (expr (primary_expr (unop_expr ! (expr (primary_expr (unop_expr - (expr (primary_expr (ident_expr x))))))))))))) ;) }))))))) ; (stmt (let_stmt let (var_init (typed_decl a : (type_antn [ int ])) = (expr (primary_expr (lit_expr (array_lit [ ]))))))) ; (stmt (expr (assignable_expr (ident_expr a)) = (expr (primary_expr (lit_expr (array_lit [ (expr_list (expr (primary_expr (lit_expr 1))) , (expr (primary_expr (lit_expr 2))) , (expr (primary_expr (lit_expr 3)))) ])))))) ; (stmt (expr (assignable_expr (ident_expr x)) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (primary_expr (lit_expr 0))) ])))) ; (stmt (expr (assignable_expr (ident_expr x)) = (expr (primary_expr (primary_expr (ident_expr a)) [ (expr (expr (primary_expr (lit_expr 1))) + (expr (primary_expr (lit_expr 1)))) ])))) ; (stmt (expr (primary_expr (call_expr foo ( ))))) ; (stmt (expr (primary_expr (call_expr bar ( (expr_list (expr (primary_expr (ident_expr x)))) ))))) ; (stmt (expr (primary_expr (call_expr baz ( (expr_list (expr (primary_expr (ident_expr x))) , (expr (primary_expr (ident_expr y)))) ))))) ; (stmt (let_stmt let (var_init (typed_decl y : (type_antn int))))) ; (stmt (let_stmt let (var_init (typed_decl c : (type_antn char)) = (expr (primary_expr (lit_expr (char_lit 'c'))))))) ; (stmt (expr (assignable_expr (ident_expr c)) = (expr (primary_expr (lit_expr (char_lit '\n')))))) ; (stmt (expr (assignable_expr (ident_expr i)) += (expr (primary_expr (lit_expr 1))))) ; (stmt (expr (primary_expr (primary_expr (ident_expr x)) . (call_expr method ( ))))) ; (stmt (expr (assignable_expr (field_selector_expr (primary_expr (ident_expr x)) . (ident_expr field))) += (expr (primary_expr (lit_expr 1))))) ;) }))) ; (stmt (struct_decl struct Foo { (let_stmt let (var_init (typed_decl bar : (type_antn int)))) ; (let_stmt let (var_init (typed_decl baz : (type_antn float)) = (expr (primary_expr (lit_expr 1.0))))) ; (fn_decl (proto fn method ( )) (block { (stmt_list (stmt (expr (assignable_expr (self_expr self . (ident_expr bar))) = (expr (expr (primary_expr (self_expr self . (ident_expr bar)))) + (expr (primary_expr (lit_expr 1)))))) ;) })) ; })) ;))
